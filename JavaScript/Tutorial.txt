JavaScript 是 Web 的编程语言

HTML 定义了网页的内容
CSS 描述了网页的布局
JavaScript 网页的行为

JavaScript  可以通过不同的方式来输出数据：
使用 window.alert() 弹出警告框。
使用 document.write() 方法将内容写到 HTML 文档中。
使用 innerHTML 写入到 HTML 元素。
使用 console.log() 写入到浏览器的控制台。


JavaScript 字面量
    数字（Number）字面量 可以是整数或者是小数，或者是科学计数(e)。
        3.14
        1001
        123e5
    字符串（String）字面量 可以使用单引号或双引号
        "John Doe"
        'John Doe'
    表达式字面量 用于计算
        5 + 6
        5 * 10
    数组（Array）字面量 定义一个数组
        [40, 100, 1, 5, 25, 10]
    对象（Object）字面量 定义一个对象：
        {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"}
    函数（Function）字面量 定义一个函数：
        function myFunction(a, b) { return a * b;}

JavaScript 变量(用于存储信息的"容器")
    使用关键字 var 来定义变量， 使用等号来为变量赋值
    var x, length
    x = 5
    length = 6

JavaScript 数据类型(5个)
    字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、、
    var x;                      // x 为 undefined
    var length = 16;            // Number 通过数字字面量赋值
    var length = 3.1415926;     // Number 
    var y=123e5;                // 12300000
    var z=123e-5;               // 0.00123
    var points = x * 10;        // Number 通过表达式字面量赋值
    var lastName = "Johnson";   // String 通过字符串字面量赋值
    var len = lastName.length;  // 字符串长度
    var x=true;
    var y=false;
    var cars = ["Saab", "Volvo", "BMW"];                // Array  通过数组字面量赋值
    var cars = new Array("Saab","Volvo","BMW");         // Array
    var cars = new Array();                             // Array
    cars[0]="Saab";
    cars[1]="Volvo";
    cars[2]="BMW";
    var person = {firstName:"John", lastName:"Doe"};  // Object 通过对象字面量赋值
    var person={
        firstname : "John",
        lastname  : "Doe",
        id        :  5566
    };
    对象类型(3个)：
        Object
        Date
        Array
    不包含任何值的数据类型(2个):
        空（Null）、未定义（Undefined）


JavaScript 函数(关键词 function)
    函数即对象，可以随意地被程序操控，函数可以嵌套在其他函数中定义，这样可以访问它们被定义时所处的作用域中的任何变量。
    带参数的函数
        ...
    带有返回值的函数
        ...
    函数表达式
        var x = function (a, b) {return a * b};
        var z = x(4, 3);    // 在函数表达式存储在变量后，变量也可作为一个函数使用
    构造函数
        var myFunction = function (a, b) {return a * b}
        var x = myFunction(4, 3);
    自调用函数
        ...
    函数可作为一个值
        function myFunction(a, b) {
            return a * b;
        }
        var x = myFunction(4, 3);
    函数可作为表达式
        function myFunction(a, b) {
            return a * b;
        }
        var x = myFunction(4, 3) * 2;

JavaScript 事件
    事件是可以被 JavaScript 侦测到的行为。

字符串方法
    charAt()	返回指定索引位置的字符
    charCodeAt()	返回指定索引位置字符的 Unicode 值
    concat()	连接两个或多个字符串，返回连接后的字符串
    fromCharCode()	将指定的 Unicode 值转换为字符串
    indexOf()	返回字符串中检索指定字符第一次出现的位置
    lastIndexOf()	返回字符串中检索指定字符最后一次出现的位置
    localeCompare()	用本地特定的顺序来比较两个字符串
    match()	找到一个或多个正则表达式的匹配
    replace()	替换与正则表达式匹配的子串
    search()	检索与正则表达式相匹配的值
    slice()	提取字符串的片断，并在新的字符串中返回被提取的部分
    split()	把字符串分割为子字符串数组
    substr()	从起始索引号提取字符串中指定数目的字符
    substring()	提取字符串中两个指定的索引号之间的字符
    toLocaleLowerCase()	根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射
    toLocaleUpperCase()	根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射
    toLowerCase()	把字符串转换为小写
    toString()	返回字符串对象值
    toUpperCase()	把字符串转换为大写
    trim()	移除字符串首尾空白
    valueOf()	返回某个字符串对象的原始值

循环
    for 循环
        for (var i=0;i<cars.length;i++) {
            document.write(cars[i] + "<br>");
        }

    while 循环
        while (i<5) {
            x=x + "The number is " + i + "<br>";
            i++;
        }

    do/while 循环
        do {
            x=x + "The number is " + i + "<br>";
            i++;
        }
        while (i<5);

typeof 操作符
    查看变量的数据类型

constructor 属性
    返回所有变量的构造函数

JavaScript 类型转换
    将数字转换为字符串
        全局方法 String() 可以将数字转换为字符串
            String(x)         // 将变量 x 转换为字符串并返回
            String(123)       // 将数字 123 转换为字符串并返回
            String( 100+ 23)  // 将数字表达式转换为字符串并返回
        toString() 也是有同样的效果
            x.toString()
            (123).toString()
            (100 + 23).toString()

JavaScript 正则表达式Regular Expression
    https://www.w3cschool.cn/javascript/js-regexp.html

